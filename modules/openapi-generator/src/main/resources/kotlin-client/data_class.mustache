{{^multiplatform}}
{{#gson}}
import com.google.gson.annotations.SerializedName
{{/gson}}
{{#moshi}}
import com.squareup.moshi.FromJson
import com.squareup.moshi.Json
import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.ToJson
import org.openapitools.client.infrastructure.Serializer
{{#moshiCodeGen}}
import com.squareup.moshi.JsonClass
{{/moshiCodeGen}}
{{/moshi}}
{{#jackson}}
import com.fasterxml.jackson.annotation.JsonProperty
{{/jackson}}
{{#kotlinx_serialization}}
import {{#serializableModel}}kotlinx.serialization.Serializable as KSerializable{{/serializableModel}}{{^serializableModel}}kotlinx.serialization.Serializable{{/serializableModel}}
import kotlinx.serialization.SerialName
import kotlinx.serialization.Contextual
{{#enumUnknownDefaultCase}}
import kotlinx.serialization.KSerializer
import kotlinx.serialization.Serializer
import kotlinx.serialization.builtins.serializer
import kotlinx.serialization.encoding.Decoder
import kotlinx.serialization.encoding.Encoder
{{/enumUnknownDefaultCase}}
{{#hasEnums}}
{{/hasEnums}}
{{/kotlinx_serialization}}
{{#parcelizeModels}}
import android.os.Parcelable
import kotlinx.parcelize.Parcelize
{{/parcelizeModels}}
{{/multiplatform}}
{{#multiplatform}}
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*
{{/multiplatform}}
{{#serializableModel}}
import java.io.Serializable
{{/serializableModel}}
{{#generateRoomModels}}
import {{roomModelPackage}}.{{classname}}RoomModel
import {{packageName}}.infrastructure.ITransformForStorage
{{/generateRoomModels}}

/**
 * {{{description}}}
 *
{{^discriminator}}
{{#allVars}}
 * @param {{{name}}} {{{description}}}
{{/allVars}}
{{/discriminator}}
 */
{{#parcelizeModels}}
@Parcelize
{{/parcelizeModels}}
{{#multiplatform}}{{^discriminator}}@Serializable{{/discriminator}}{{/multiplatform}}{{#kotlinx_serialization}}{{#serializableModel}}@KSerializable{{/serializableModel}}{{^serializableModel}}@Serializable{{/serializableModel}}{{/kotlinx_serialization}}{{#moshi}}{{#moshiCodeGen}}@JsonClass(generateAdapter = true){{/moshiCodeGen}}{{/moshi}}{{#jackson}}{{#discriminator}}{{>typeInfoAnnotation}}{{/discriminator}}{{/jackson}}
{{#isDeprecated}}
@Deprecated(message = "This schema is deprecated.")
{{/isDeprecated}}
{{>additionalModelTypeAnnotations}}
{{#nonPublicApi}}internal {{/nonPublicApi}}{{#discriminator}}public abstract class{{/discriminator}}{{^discriminator}}data class{{/discriminator}} {{classname}}{{^discriminator}} (

{{#allVars}}
{{#required}}{{>data_class_req_var}}{{/required}}{{^required}}{{>data_class_opt_var}}{{/required}}{{^-last}},{{/-last}}

{{/allVars}}
){{/discriminator}}{{#vendorExtensions.x-stream-event-call-type}}: {{vendorExtensions.x-stream-ws-base-event-name}}(), WSCallEvent{{/vendorExtensions.x-stream-event-call-type}}{{#vendorExtensions.x-stream-event-client-type}}: {{vendorExtensions.x-stream-ws-base-event-name}}(), WSClientEvent{{/vendorExtensions.x-stream-event-client-type}}{{#parent}}{{^serializableModel}}{{^parcelizeModels}} : {{{parent}}}{{#isMap}}(){{/isMap}}{{#isArray}}(){{/isArray}}{{/parcelizeModels}}{{/serializableModel}}{{/parent}}{{#parent}}{{#serializableModel}}{{^parcelizeModels}} : {{{parent}}}{{#isMap}}(){{/isMap}}{{#isArray}}(){{/isArray}}, Serializable{{/parcelizeModels}}{{/serializableModel}}{{/parent}}{{#parent}}{{^serializableModel}}{{#parcelizeModels}} : {{{parent}}}{{#isMap}}(){{/isMap}}{{#isArray}}(){{/isArray}}, Parcelable{{/parcelizeModels}}{{/serializableModel}}{{/parent}}{{#parent}}{{#serializableModel}}{{#parcelizeModels}} : {{{parent}}}{{#isMap}}(){{/isMap}}{{#isArray}}(){{/isArray}}, Serializable, Parcelable{{/parcelizeModels}}{{/serializableModel}}{{/parent}}{{^parent}}{{#serializableModel}}{{^parcelizeModels}} : Serializable{{/parcelizeModels}}{{/serializableModel}}{{/parent}}{{^parent}}{{^serializableModel}}{{#parcelizeModels}} : Parcelable{{/parcelizeModels}}{{/serializableModel}}{{/parent}}{{^parent}}{{#serializableModel}}{{#parcelizeModels}} : Serializable, Parcelable{{/parcelizeModels}}{{/serializableModel}}{{/parent}}{{#generateRoomModels}}{{#parent}}, {{/parent}}{{^discriminator}}{{^parent}}:{{/parent}} ITransformForStorage<{{classname}}RoomModel>{{/discriminator}}{{/generateRoomModels}}{{#discriminator}} { {{/discriminator}}{{#vendorExtensions.x-stream-event-call-type}} { {{/vendorExtensions.x-stream-event-call-type}}{{#vendorExtensions.x-stream-event-client-type}} { {{/vendorExtensions.x-stream-event-client-type}}
{{! hard-coded stuff to make the event things work }}
{{#discriminator}}
    abstract fun getEventType(): String
}
{{/discriminator}}
{{#vendorExtensions.x-has-data-class-body}}{{^discriminator}}
{
{{/discriminator}}{{/vendorExtensions.x-has-data-class-body}}
{{#vendorExtensions.x-stream-event-call-type}}
    override fun getCallCID(): String {
        return callCid
    }

    override fun getEventType(): String {
        return type
    }
}
{{/vendorExtensions.x-stream-event-call-type}}
{{#vendorExtensions.x-stream-event-client-type}}
    override fun getEventType(): String {
        return type
    }
}
{{/vendorExtensions.x-stream-event-client-type}}
{{#generateRoomModels}}
    companion object { }
    {{^discriminator}}override fun toRoomModel(): {{classname}}RoomModel =
        {{classname}}RoomModel(roomTableId = 0,
        {{#allVars}}{{#items.isPrimitiveType}}{{#isArray}}{{#isList}}{{name}} = this.{{name}},{{/isList}}{{/isArray}}{{/items.isPrimitiveType}}{{^isEnum}}{{^isArray}}{{name}} = this.{{name}},{{/isArray}}{{/isEnum}}{{#isEnum}}{{^isArray}}{{name}} = this.{{name}},{{/isArray}}{{/isEnum}}
        {{/allVars}}
        ){{/discriminator}}
{{/generateRoomModels}}
{{#serializableModel}}
    {{#nonPublicApi}}internal {{/nonPublicApi}}companion object {
        private const val serialVersionUID: Long = 123
    }
{{/serializableModel}}
{{#hasEnums}}
{{^discriminator}}
{{#vars}}
{{#isEnum}}
    /**
     * {{{description}}}
     *
     * Values: {{#allowableValues}}{{#enumVars}}{{&name}}{{^-last}},{{/-last}}{{/enumVars}}{{/allowableValues}}
     */
    {{^multiplatform}}
    {{#kotlinx_serialization}}
    {{#serializableModel}}@KSerializable{{/serializableModel}}{{^serializableModel}}@Serializable{{#enumUnknownDefaultCase}}(with = {{classname}}Serializer::class){{/enumUnknownDefaultCase}}{{/serializableModel}}
    {{/kotlinx_serialization}}
    {{/multiplatform}}
    {{#multiplatform}}
    @Serializable
    {{/multiplatform}}

    {{#nonPublicApi}}internal {{/nonPublicApi}}sealed class {{{nameInCamelCase}}}(val value: kotlin.String) {
        override fun toString(): String = value

        companion object {
            fun fromString(s: kotlin.String): {{{nameInCamelCase}}} = when (s) {
                {{#allowableValues}}
                {{#enumVars}}
                {{{value}}} -> {{#lambda.kotlinidescape}}{{#lambda.pascalcase}}{{&name}}{{/lambda.pascalcase}}{{/lambda.kotlinidescape}}
                {{/enumVars}}
                {{/allowableValues}}
                else -> Unknown(s)
            }
        }

        {{#allowableValues}}
        {{#enumVars}}
        object {{#lambda.kotlinidescape}}{{#lambda.pascalcase}}{{&name}}{{/lambda.pascalcase}}{{/lambda.kotlinidescape}} : {{{nameInCamelCase}}}({{{value}}})
        {{/enumVars}}
        {{/allowableValues}}
        data class Unknown(val unknownValue: kotlin.String) : {{{nameInCamelCase}}}(unknownValue)

        class {{{nameInCamelCase}}}Adapter : JsonAdapter<{{{nameInCamelCase}}}>() {
            @FromJson
            override fun fromJson(reader: JsonReader): {{{nameInCamelCase}}}? {
                val s = reader.nextString() ?: return null
                return fromString(s)
            }

            @ToJson
            override fun toJson(writer: JsonWriter, value: {{{nameInCamelCase}}}?) {
                writer.value(value?.value)
            }
        }
    }

    {{#kotlinx_serialization}}{{#enumUnknownDefaultCase}}
    @Serializer(forClass = {{{nameInCamelCase}}}::class)
    internal object {{nameInCamelCase}}Serializer : KSerializer<{{nameInCamelCase}}> {
        override val descriptor = {{{dataType}}}.serializer().descriptor

        override fun deserialize(decoder: Decoder): {{nameInCamelCase}} {
            val value = decoder.decodeSerializableValue({{{dataType}}}.serializer())
            return {{nameInCamelCase}}.values().firstOrNull { it.value == value }
                ?: {{nameInCamelCase}}.{{#allowableValues}}{{#enumVars}}{{#-last}}{{&name}}{{/-last}}{{/enumVars}}{{/allowableValues}}
        }

        override fun serialize(encoder: Encoder, value: {{nameInCamelCase}}) {
            encoder.encodeSerializableValue({{{dataType}}}.serializer(), value.value)
        }
    }{{/enumUnknownDefaultCase}}{{/kotlinx_serialization}}
{{/isEnum}}
{{/vars}}
{{/discriminator}}
{{/hasEnums}}
{{#vendorExtensions.x-has-data-class-body}}{{^discriminator}}
}
{{/discriminator}}{{/vendorExtensions.x-has-data-class-body}}
{{! additional part about json decoding }}
{{#discriminator}}
class {{classname}}Adapter : JsonAdapter<{{classname}}>() {

    @FromJson
    override fun fromJson(reader: JsonReader): {{classname}}? {
        val peek = reader.peekJson()
        var eventType: String? = null
        reader.beginObject()
        while (reader.hasNext()) {
            if (reader.nextName() == "type") {
                eventType = reader.nextString()
            } else {
                reader.skipValue()
            }
        }
        reader.endObject()

        return eventType?.let {
            peek.use { peekedReader ->
                Serializer.moshi.adapter(getSubclass(eventType)).fromJson(peekedReader)
            }
        }
    }

    @ToJson
    override fun toJson(writer: JsonWriter, value: {{classname}}?) {
        throw UnsupportedOperationException("toJson not implemented")
    }

    private fun getSubclass(type: String): Class<out {{classname}}> {
        return when ({{ discriminator.propertyName }}) {
    {{#discriminator.mappedModels}}
            "{{getMappingName}}" -> {{modelName}}::class.java
    {{/discriminator.mappedModels}}
            else -> throw IllegalArgumentException("Unknown type: $type")
        }
    }
}{{/discriminator}}