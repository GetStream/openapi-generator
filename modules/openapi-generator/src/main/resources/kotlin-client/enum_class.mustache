{{^multiplatform}}
{{#gson}}
import com.google.gson.annotations.SerializedName
{{/gson}}
{{#moshi}}
import com.squareup.moshi.FromJson
import com.squareup.moshi.Json
import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.ToJson
{{/moshi}}
{{#jackson}}
import com.fasterxml.jackson.annotation.JsonProperty
{{/jackson}}
{{#kotlinx_serialization}}
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable
{{#enumUnknownDefaultCase}}
import kotlinx.serialization.KSerializer
import kotlinx.serialization.Serializer
import kotlinx.serialization.builtins.serializer
import kotlinx.serialization.encoding.Decoder
import kotlinx.serialization.encoding.Encoder
{{/enumUnknownDefaultCase}}
{{/kotlinx_serialization}}
{{/multiplatform}}
{{#multiplatform}}
import kotlinx.serialization.*
{{/multiplatform}}

/**
 * {{{description}}}
 *
 * Values: {{#allowableValues}}{{#enumVars}}{{&name}}{{^-last}},{{/-last}}{{/enumVars}}{{/allowableValues}}
 */
{{#multiplatform}}@Serializable{{/multiplatform}}{{#kotlinx_serialization}}@Serializable{{#enumUnknownDefaultCase}}(with = {{classname}}Serializer::class){{/enumUnknownDefaultCase}}{{/kotlinx_serialization}}
{{#nonPublicApi}}internal {{/nonPublicApi}}sealed class {{classname}}(val value: {{{dataType}}}) {
    override fun toString(): String = value

    companion object {
        fun fromString(s: kotlin.String): {{classname}} = when (s) {
        {{#allowableValues}}
        {{#enumVars}}
            {{{value}}} -> {{#lambda.kotlinidescape}}{{#lambda.pascalcase}}{{&name}}{{/lambda.pascalcase}}{{/lambda.kotlinidescape}}
        {{/enumVars}}
        {{/allowableValues}}
            else -> Unknown(s)
        }
    }

    {{#allowableValues}}
    {{#enumVars}}
    object {{#lambda.kotlinidescape}}{{#lambda.pascalcase}}{{&name}}{{/lambda.pascalcase}}{{/lambda.kotlinidescape}} : {{classname}}({{{value}}})
    {{/enumVars}}
    {{/allowableValues}}
    data class Unknown(val unknownValue: kotlin.String) : {{classname}}(unknownValue)

    class {{classname}}Adapter : JsonAdapter<{{classname}}>() {
        @FromJson
        override fun fromJson(reader: JsonReader): {{classname}}? {
            val s = reader.nextString() ?: return null
            return fromString(s)
        }

        @ToJson
        override fun toJson(writer: JsonWriter, value: {{classname}}?) {
            writer.value(value?.value)
        }
    }
}{{#kotlinx_serialization}}{{#enumUnknownDefaultCase}}

@Serializer(forClass = {{classname}}::class)
internal object {{classname}}Serializer : KSerializer<{{classname}}> {
    override val descriptor = {{{dataType}}}.serializer().descriptor

    override fun deserialize(decoder: Decoder): {{classname}} {
        val value = decoder.decodeSerializableValue({{{dataType}}}.serializer())
        return {{classname}}.values().firstOrNull { it.value == value }
            ?: {{classname}}.{{#allowableValues}}{{#enumVars}}{{#-last}}{{&name}}{{/-last}}{{/enumVars}}{{/allowableValues}}
    }

    override fun serialize(encoder: Encoder, value: {{classname}}) {
        encoder.encodeSerializableValue({{{dataType}}}.serializer(), value.value)
    }
}{{/enumUnknownDefaultCase}}{{/kotlinx_serialization}}
