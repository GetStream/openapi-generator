{{#discriminator}}
internal class {{classname}}Mapping: Decodable {
    let {{ discriminator.propertyName }}: String
}
{{/discriminator}}

{{#nonPublicApi}}internal{{/nonPublicApi}}{{^nonPublicApi}}public{{/nonPublicApi}} enum {{classname}}: {{#useVapor}}Content{{/useVapor}}{{^useVapor}}Codable, JSONEncodable{{#vendorExtensions.x-swift-hashable}}, Hashable{{/vendorExtensions.x-swift-hashable}}{{/useVapor}} {
    {{#oneOf}}
    case type{{.}}({{.}})
    {{/oneOf}}
    {{#discriminator}}
    public var type: String {
        switch self {
        {{#oneOf}}
        case .type{{.}}(let value):
            return value.type
        {{/oneOf}}
        }
    }
    {{! HACK: to make event handling simpler in Swift, the rawValue has Event hardcoded }}
    public var rawValue: Event {
        switch self {
        {{#oneOf}}
        case .type{{.}}(let value):
            return value
        {{/oneOf}}
        }
    }
    {{/discriminator}}
    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        {{#oneOf}}
        case .type{{.}}(let value):
            try container.encode(value)
        {{/oneOf}}
        }
    }

{{#discriminator}}
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let dto = try container.decode({{classname}}Mapping.self)
    {{#discriminator.mappedModels}}
        {{#-first}}
        if dto.{{ discriminator.propertyName }} == "{{getMappingName}}" {
        {{/-first}}
        {{^-first}}
        } else if dto.{{ discriminator.propertyName }} == "{{getMappingName}}" {
        {{/-first}}
            let value = try container.decode({{modelName}}.self)
            self = .type{{modelName}}(value)
    {{/discriminator.mappedModels}}
        } else {
            throw DecodingError.typeMismatch(Self.Type.self, .init(codingPath: decoder.codingPath, debugDescription: "Unable to decode instance of {{classname}}"))
        }
    }
{{/discriminator}}

{{^discriminator}}
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        {{#oneOf}}
            {{#-first}}
                if let value = try? container.decode({{.}}.self) {
            {{/-first}}
            {{^-first}}
                } else if let value = try? container.decode({{.}}.self) {
            {{/-first}}
            self = .type{{.}}(value)
        {{/oneOf}}
        } else {
            throw DecodingError.typeMismatch(Self.Type.self, .init(codingPath: decoder.codingPath, debugDescription: "Unable to decode instance of {{classname}}"))
        }
    }
{{/discriminator}}
}
